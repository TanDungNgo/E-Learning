(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@babel/runtime/helpers/slicedToArray'), require('@babel/runtime/helpers/classCallCheck'), require('@babel/runtime/helpers/createClass'), require('@babel/runtime/helpers/inherits'), require('@babel/runtime/helpers/possibleConstructorReturn'), require('@babel/runtime/helpers/getPrototypeOf'), require('@babel/runtime/helpers/wrapNativeSuper')) :
    typeof define === 'function' && define.amd ? define(['@babel/runtime/helpers/slicedToArray', '@babel/runtime/helpers/classCallCheck', '@babel/runtime/helpers/createClass', '@babel/runtime/helpers/inherits', '@babel/runtime/helpers/possibleConstructorReturn', '@babel/runtime/helpers/getPrototypeOf', '@babel/runtime/helpers/wrapNativeSuper'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global._slicedToArray, global._classCallCheck, global._createClass, global._inherits, global._possibleConstructorReturn, global._getPrototypeOf, global._wrapNativeSuper));
})(this, (function (_slicedToArray, _classCallCheck, _createClass, _inherits, _possibleConstructorReturn, _getPrototypeOf, _wrapNativeSuper) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
    var _classCallCheck__default = /*#__PURE__*/_interopDefaultLegacy(_classCallCheck);
    var _createClass__default = /*#__PURE__*/_interopDefaultLegacy(_createClass);
    var _inherits__default = /*#__PURE__*/_interopDefaultLegacy(_inherits);
    var _possibleConstructorReturn__default = /*#__PURE__*/_interopDefaultLegacy(_possibleConstructorReturn);
    var _getPrototypeOf__default = /*#__PURE__*/_interopDefaultLegacy(_getPrototypeOf);
    var _wrapNativeSuper__default = /*#__PURE__*/_interopDefaultLegacy(_wrapNativeSuper);

    function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf__default["default"](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default["default"](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default["default"](this, result); }; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

    var RecorderAudioWorkletProcessor = /*#__PURE__*/function (_AudioWorkletProcesso) {
      _inherits__default["default"](RecorderAudioWorkletProcessor, _AudioWorkletProcesso);

      var _super = _createSuper(RecorderAudioWorkletProcessor);

      function RecorderAudioWorkletProcessor() {
        var _this;

        _classCallCheck__default["default"](this, RecorderAudioWorkletProcessor);

        _this = _super.call(this);
        _this._encoderPort = null;
        _this._state = 'inactive';

        _this.port.onmessage = function (_ref) {
          var data = _ref.data;

          if (data.method === 'pause') {
            if (_this._state === 'active' || _this._state === 'recording') {
              _this._state = 'paused';

              _this._sendAcknowledgement(data.id);
            } else {
              _this._sendUnexpectedStateError(data.id);
            }
          } else if (data.method === 'record') {
            if (_this._state === 'inactive') {
              _this._encoderPort = data.params.encoderPort;
              _this._state = 'active';

              _this._sendAcknowledgement(data.id);
            } else {
              _this._sendUnexpectedStateError(data.id);
            }
          } else if (data.method === 'resume') {
            if (_this._state === 'paused') {
              _this._state = 'active';

              _this._sendAcknowledgement(data.id);
            } else {
              _this._sendUnexpectedStateError(data.id);
            }
          } else if (data.method === 'stop') {
            if ((_this._state === 'active' || _this._state === 'paused' || _this._state === 'recording') && _this._encoderPort !== null) {
              _this._stop(_this._encoderPort);

              _this._sendAcknowledgement(data.id);
            } else {
              _this._sendUnexpectedStateError(data.id);
            }
          } else if (typeof data.id === 'number') {
            _this.port.postMessage({
              error: {
                code: -32601,
                message: 'The requested method is not supported.'
              },
              id: data.id
            });
          }
        };

        return _this;
      }

      _createClass__default["default"](RecorderAudioWorkletProcessor, [{
        key: "process",
        value: function process(_ref2) {
          var _ref3 = _slicedToArray__default["default"](_ref2, 1),
              input = _ref3[0];

          if (this._state === 'inactive' || this._state === 'paused') {
            return true;
          }

          if (this._state === 'active') {
            if (input === undefined) {
              throw new Error('No channelData was received for the first input.');
            }

            if (input.length === 0) {
              return true;
            }

            this._state = 'recording';
          }

          if (this._state === 'recording' && this._encoderPort !== null) {
            if (input === undefined) {
              throw new Error('No channelData was received for the first input.');
            }

            if (input.length === 0) {
              this._stop(this._encoderPort);
            } else {
              this._encoderPort.postMessage(input, input.map(function (_ref4) {
                var buffer = _ref4.buffer;
                return buffer;
              }));

              return true;
            }
          }

          return false;
        }
      }, {
        key: "_sendAcknowledgement",
        value: function _sendAcknowledgement(id) {
          this.port.postMessage({
            id: id,
            result: null
          });
        }
      }, {
        key: "_sendUnexpectedStateError",
        value: function _sendUnexpectedStateError(id) {
          this.port.postMessage({
            error: {
              code: -32603,
              message: 'The internal state does not allow to process the given message.'
            },
            id: id
          });
        }
      }, {
        key: "_stop",
        value: function _stop(encoderPort) {
          encoderPort.postMessage([]);
          encoderPort.close();
          this._encoderPort = null;
          this._state = 'stopped';
        }
      }]);

      return RecorderAudioWorkletProcessor;
    }( /*#__PURE__*/_wrapNativeSuper__default["default"](AudioWorkletProcessor));
    RecorderAudioWorkletProcessor.parameterDescriptors = [];

    registerProcessor('recorder-audio-worklet-processor', RecorderAudioWorkletProcessor);

}));
